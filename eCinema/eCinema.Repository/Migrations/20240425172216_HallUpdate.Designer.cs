// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCinema.Repository;

#nullable disable

namespace eCinema.Repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240425172216_HallUpdate")]
    partial class HallUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eCinema.Core.Entities.Actor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BirthDate = new DateTime(2024, 4, 25, 19, 22, 16, 416, DateTimeKind.Local).AddTicks(9944),
                            Email = "jennifer.lopez@gmail.com",
                            FirstName = "Jennifer",
                            Gender = 1,
                            LastName = "Lopez"
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Cinema", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfHalls")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityId");

                    b.ToTable("Cinemas");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Bisce Polje bb",
                            CityId = 1,
                            Email = "plazamostar@gmail.com",
                            Name = "Cineplexx Plaza Mostar",
                            NumberOfHalls = 10,
                            PhoneNumber = "060100100"
                        },
                        new
                        {
                            ID = 2,
                            Address = "Dzemala Bijedica St",
                            CityId = 2,
                            Email = "srajevocinestar@gmail.com",
                            Name = "CineStar Sarajevo",
                            NumberOfHalls = 5,
                            PhoneNumber = "060200200"
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CountryId = 1,
                            Name = "Mostar",
                            ZipCode = "88000"
                        },
                        new
                        {
                            ID = 2,
                            CountryId = 1,
                            Name = "Sarajevo",
                            ZipCode = "77000"
                        },
                        new
                        {
                            ID = 3,
                            CountryId = 1,
                            Name = "Tuzla",
                            ZipCode = "75000"
                        },
                        new
                        {
                            ID = 4,
                            CountryId = 1,
                            Name = "Zenica",
                            ZipCode = "72000"
                        },
                        new
                        {
                            ID = 5,
                            CountryId = 1,
                            Name = "Konjic",
                            ZipCode = "88400"
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Croatia"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Serbia"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Australia"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Canada"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Switzerland"
                        },
                        new
                        {
                            ID = 7,
                            Name = "France"
                        },
                        new
                        {
                            ID = 8,
                            Name = "United States"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Germany"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Austria"
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CinemaId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BirthDate = new DateTime(2024, 4, 25, 19, 22, 16, 416, DateTimeKind.Local).AddTicks(9994),
                            CinemaId = 1,
                            Email = "almedina.golos@eCinema.com",
                            FirstName = "Almedina",
                            Gender = 1,
                            IsActive = true,
                            LastName = "Gološ",
                            PasswordHash = "b4I5yA4Mp+0Pg1C3EsKU17sS13eDExGtBjjI07Vh/JM=",
                            PasswordSalt = "1wQEjdSFeZttx6dlvEDjOg==",
                            PhoneNumber = "38761327546",
                            Role = 0,
                            Username = "almedinaG"
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Action"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Comedy"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Horror"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Romance"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Western"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Drama"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Mistery"
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Hall", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfSeatsPerRow")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRows")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CinemaId");

                    b.ToTable("Hall");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CinemaId = 1,
                            MaxNumberOfSeatsPerRow = 0,
                            Name = "A1",
                            NumberOfRows = 0,
                            NumberOfSeats = 25
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "English"
                        },
                        new
                        {
                            ID = 2,
                            Name = "German"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Bosnian"
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Movie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProductionId")
                        .HasColumnType("int");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductionId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Author = "",
                            Description = "",
                            Duration = 150,
                            LanguageId = 1,
                            ProductionId = 1,
                            ReleaseYear = 2001,
                            Title = "Fast and furious"
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.MovieActor", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActors");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            ActorId = 1
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            GenreId = 1
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Production", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryId");

                    b.ToTable("Productions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CountryId = 6,
                            Name = "Warner Bros"
                        },
                        new
                        {
                            ID = 2,
                            CountryId = 6,
                            Name = "Universal Pictures"
                        },
                        new
                        {
                            ID = 3,
                            CountryId = 3,
                            Name = "Režim"
                        },
                        new
                        {
                            ID = 4,
                            CountryId = 6,
                            Name = "Volcano Films"
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Reservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("ShowId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            SeatId = 1,
                            ShowId = 1,
                            UserId = 1,
                            isActive = true
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Seat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDisabled")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("HallId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Column = 1,
                            HallId = 1,
                            Row = "A",
                            isDisabled = false
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Show", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("HallId");

                    b.HasIndex("MovieId");

                    b.ToTable("Shows");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateTime = new DateTime(2024, 4, 25, 19, 22, 16, 417, DateTimeKind.Local).AddTicks(69),
                            Format = "ThreeD",
                            HallId = 1,
                            MovieId = 1,
                            Price = 25.0
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@eCinema.com",
                            FirstName = "Asmira",
                            Gender = 1,
                            IsActive = true,
                            IsVerified = false,
                            LastName = "Husić",
                            PasswordHash = "b4I5yA4Mp+0Pg1C3EsKU17sS13eDExGtBjjI07Vh/JM=",
                            PasswordSalt = "1wQEjdSFeZttx6dlvEDjOg==",
                            PhoneNumber = "38761123456",
                            Role = 1,
                            Username = "asmiraH"
                        });
                });

            modelBuilder.Entity("eCinema.Core.Entities.Cinema", b =>
                {
                    b.HasOne("eCinema.Core.Entities.City", "City")
                        .WithMany("Cinemas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("eCinema.Core.Entities.City", b =>
                {
                    b.HasOne("eCinema.Core.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Employee", b =>
                {
                    b.HasOne("eCinema.Core.Entities.Cinema", "Cinema")
                        .WithMany("Employees")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Hall", b =>
                {
                    b.HasOne("eCinema.Core.Entities.Cinema", "Cinema")
                        .WithMany("Halls")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Movie", b =>
                {
                    b.HasOne("eCinema.Core.Entities.Language", "Language")
                        .WithMany("Movies")
                        .HasForeignKey("LanguageId");

                    b.HasOne("eCinema.Core.Entities.Production", "Production")
                        .WithMany("Movies")
                        .HasForeignKey("ProductionId");

                    b.Navigation("Language");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("eCinema.Core.Entities.MovieActor", b =>
                {
                    b.HasOne("eCinema.Core.Entities.Actor", "Actor")
                        .WithMany("Movies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCinema.Core.Entities.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("eCinema.Core.Entities.MovieGenre", b =>
                {
                    b.HasOne("eCinema.Core.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCinema.Core.Entities.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Production", b =>
                {
                    b.HasOne("eCinema.Core.Entities.Country", "Country")
                        .WithMany("Productions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Reservation", b =>
                {
                    b.HasOne("eCinema.Core.Entities.Seat", "Seat")
                        .WithMany("Reservations")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCinema.Core.Entities.Show", "Show")
                        .WithMany("Reservations")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCinema.Core.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("Show");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Seat", b =>
                {
                    b.HasOne("eCinema.Core.Entities.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Show", b =>
                {
                    b.HasOne("eCinema.Core.Entities.Hall", "Hall")
                        .WithMany("Shows")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCinema.Core.Entities.Movie", "Movie")
                        .WithMany("Shows")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Actor", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Cinema", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Halls");
                });

            modelBuilder.Entity("eCinema.Core.Entities.City", b =>
                {
                    b.Navigation("Cinemas");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Productions");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Hall", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Shows");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Language", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Movie", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Genres");

                    b.Navigation("Shows");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Production", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Seat", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("eCinema.Core.Entities.Show", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("eCinema.Core.Entities.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
